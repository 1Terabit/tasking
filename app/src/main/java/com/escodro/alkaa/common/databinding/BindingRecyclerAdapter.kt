package com.escodro.alkaa.common.databinding

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.annotation.LayoutRes
import androidx.databinding.DataBindingUtil
import androidx.databinding.ViewDataBinding
import androidx.recyclerview.widget.RecyclerView

/**
 * Base class to binding the data in a [RecyclerView] using data binding and abstracting the
 * default methods.
 *
 * @param T Type of the item displayed in the list
 * @param B Binding class generated by the layout
 */
abstract class BindingRecyclerAdapter<T, B : ViewDataBinding> :
    RecyclerView.Adapter<BindingHolder<B>>() {

    /**
     * Layout resource for the item layout.
     */
    @get:LayoutRes
    abstract val layoutResource: Int

    private val list: MutableList<T> = ArrayList()

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BindingHolder<B> {
        val inflater = LayoutInflater.from(parent.context)
        val binding = DataBindingUtil.inflate<B>(inflater, layoutResource, parent, false)
        return BindingHolder(binding)
    }

    override fun getItemCount(): Int =
        list.size

    override fun onBindViewHolder(holder: BindingHolder<B>, position: Int) {
        val bindingHolder = holder.binding
        val data = list[position]

        bindData(bindingHolder, data)
    }

    /**
     * Binds the data in the data in the layout.
     *
     * @param binding Binding generated by the layout
     * @param data Type of the item displayed in the list
     */
    abstract fun bindData(binding: B, data: T)

    /**
     * Updates the [RecyclerView] with the given [List].
     *
     * @param newList list of tasks
     */
    fun updateList(newList: List<T>) {
        list.clear()
        list.addAll(newList)
        notifyDataSetChanged()
    }

    /**
     * Adds a new item in the list.
     *
     * @param newItem item to be added
     */
    fun addItem(newItem: T) {
        list.add(newItem)
        notifyItemChanged(itemCount)
    }

    /**
     * Removes new item from the list.
     *
     * @param item item to be removed
     */
    fun removeItem(item: T) {
        val position = list.indexOf(item)
        list.remove(item)
        notifyItemChanged(position)
        notifyItemRangeChanged(position, list.size)
    }
}
